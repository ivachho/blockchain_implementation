constant SHA256 = require('cryto-js/sha256');
  
  class Block {
      constructor(index, timestamp, data, previousHash = ''){
        this.index = index;
        this.timestamp = timestamp;
        this.data = data;
        this.previousHash = previousHash;
        this.hash = this.calculateHash(); //this must be calculated

      }
      //take in properties of block, set default to empty
      //index: where the block is on the chain
      //timestamp: when was the block created
      //

      calculateHash(){
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();
      } //this function will calculate the hash using sha256 hash function and properties

  }

  class Blockchain{
    constructor(){
        this.chain = [this.createGenesisBlock()]; //array of blocks, first block is called the Genesis block
    }
    createGenesisBlock(){
        return new Block(0, "01/01/2021", "Genesis Block", "0");
    }

    getLastestBlock(){
        return this.chain[this.chain.length -1];
    }
    addBlock(newBlock){
        newBlock.previousHash = this.getLastestBlock().hash;
        newBlock.hash = newBlock.calculateHash();
        this.chain.push(newBlock);
    }
    isValid(){
        for(let i = 1; i < this.chain.length; i++){
            const currentBlock = this.chain[i];
            const prevBlocl = this.chain[i-1];
        }
        if(currentBlock.hash !== currentBlock.calculateHash()){
            return false;
        }//checks to see if the block's hash has been changed
        if(currentBlock.previousHash !== previousHash.hash){
            return false;
        }//is the current block's previous hash property equal to the previous hash's hash?
        return true;
        
    }

  }

